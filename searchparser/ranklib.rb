require File.dirname(__FILE__) + '/fetcher.rb'

# write_terms_file()
#
# Loads all the projects, their URLs, and the list of tracked queries
# for the project, and saves them to a YAML file
def write_terms_file(file)
  terms = {}
  projects = Project.find_by_sql("SELECT id,url,queries FROM projects")

  projects.each do |p|
    if (p.queries)
      terms[p.id] = { :domain => p.url, :queries => p.queries }
    end
  end

  file.puts(terms.to_yaml)
end

# get_rankings()
#
# Reads the list of search queries from the file generated by write_terms_file(),
# passes the queries on to the Fetcher.  Writes the rank results to 'outfile'
# in YAML format.
def get_rankings(infile, outfile, loadFromFile)
  output = {}
  projects = YAML::load(infile)
  projects.each_pair do |pid, data|
    fetcher = Fetcher.new(pid)
    results = fetcher.fetch_results(data[:queries], loadFromFile)

    output[pid] = {}
    results.each do |result|
      result.each do |r|
        rank = r.get_rank(data[:domain])
        
        output[pid][r.query] = {} if output[pid][r.query].nil? && !rank.nil?
        output[pid][r.query][r.engine] = rank unless rank.nil?
      end
    end
  end

  outfile.puts(output.to_yaml)
end

# store_rank_result()
#
# Saves a Ranking record in the database that was
# presumably read from the rankings file generated by
# the Fetcher.  'rankhash' is a hash of engines to ranks.
def store_rank_result(pid, query, rankhash)
  rankhash.each_pair do |engine, rank|
    enginechr = engine.to_s[0].chr
    ranking = Ranking.find(
      :first,
      :conditions => ['project_id = ? and engine = ? and query = ?',
                      pid, enginechr, query],
      :order      => "search_date DESC")

    if ranking.nil? || ranking.rank != rank
      newrank = Ranking.new(:project_id  => pid,
                            :query       => CGI.unescape(query),
                            :engine      => enginechr,
                            :rank        => rank,
                            :search_date => Date.today)
      newrank.delta = ranking.rank - rank unless ranking.nil?
      newrank.save!
    end
  end
end

# store_rank_results()
#
# Loads the YAML file generated by the Fetcher class.  For each
# rank saved in the file, calls save_ranks_to_database
# to write the results back into our database.
def store_rank_results(file)
  results = YAML::load(file)
  results.each_pair do |pid, rankings_hash|
    rankings_hash.each_pair do |query, rank_hash|
      store_rank_result(pid, query, rank_hash)
    end
  end
end

